---
# Source: microservices/templates/product-service/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: product-service
  namespace: default
spec:
  replicas: 2
  selector:
    matchLabels:
      app: product-service
  template:
    metadata:
      labels:
        app: product-service
    spec:
      imagePullSecrets:
      - name: acr-secret
      containers:
      - name: product-service
        image: {{ .Values.containerRegistry }}/{{ .Values.imageRepository }}/product-service:{{ .Values.tag }}
        ports:
        - containerPort: 8002
        resources:
          limits:
            cpu: 200m
            memory: 256Mi
          requests:
            cpu: 100m
            memory: 128Mi
        env:
        - name: SQLALCHEMY_DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: product-secrets
              key: SQLALCHEMY_DATABASE_URL
        - name: REDIS_URL
          value: "redis://redis:6379/1"
        livenessProbe:
          httpGet:
            path: /health
            port: 8002
          initialDelaySeconds: 5
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: 8002
          initialDelaySeconds: 5
          periodSeconds: 10 
---
# Source: microservices/templates/auth-service/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: auth-service
  namespace: default
spec:
  replicas: 2
  selector:
    matchLabels:
      app: auth-service
  template:
    metadata:
      labels:
        app: auth-service
    spec:
      imagePullSecrets:
      - name: acr-secret
      containers:
      - name: auth-service
        image: {{ .Values.containerRegistry }}/{{ .Values.imageRepository }}/auth-service:{{ .Values.tag }}
        ports:
        - containerPort: 8001
        resources:
          limits:
            cpu: 200m
            memory: 256Mi
          requests:
            cpu: 100m
            memory: 128Mi
        env:
        - name: SQLALCHEMY_DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: auth-secrets
              key: SQLALCHEMY_DATABASE_URL
        - name: REDIS_URL
          value: "redis://redis:6379/0"
        livenessProbe:
          httpGet:
            path: /health
            port: 8001
          initialDelaySeconds: 5
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: 8001
          initialDelaySeconds: 5
          periodSeconds: 10 
---
# Source: microservices/templates/api-gateway/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-gateway
  namespace: default
spec:
  replicas: 2
  selector:
    matchLabels:
      app: api-gateway
  template:
    metadata:
      labels:
        app: api-gateway
    spec:
      imagePullSecrets:
        - name: acr-secret
      containers:
        - name: api-gateway
          image: {{ .Values.containerRegistry }}/{{ .Values.imageRepository }}/api-gateway:{{ .Values.tag }}
          ports:
            - containerPort: 8000
          resources:
            limits:
              cpu: 200m
              memory: 256Mi
            requests:
              cpu: 100m
              memory: 128Mi
          env:
            - name: AUTH_SERVICE_URL
              value: "http://auth-service:8001"
            - name: ORDER_SERVICE_URL
              value: "http://order-service:8003"
            - name: PRODUCT_SERVICE_URL
              value: "http://product-service:8002"
          livenessProbe:
            httpGet:
              path: /health
              port: 8000
            initialDelaySeconds: 5
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /ready
              port: 8000
            initialDelaySeconds: 5
            periodSeconds: 10 
---
# Source: microservices/templates/redis/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: default
spec:
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:7
        ports:
        - containerPort: 6379
---
apiVersion: v1
kind: Service
metadata:
  name: redis
  namespace: default
spec:
  selector:
    app: redis
  ports:
  - port: 6379 
---
# Source: microservices/templates/postgres/deployment.yaml

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-auth-pvc
  namespace: default
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres-auth
  namespace: default
spec:
  selector:
    matchLabels:
      app: postgres-auth
  template:
    metadata:
      labels:
        app: postgres-auth
    spec:
      containers:
      - name: postgres
        image: postgres:15
        env:
        - name: POSTGRES_DB
          value: "auth_db"
        - name: POSTGRES_PASSWORD
          value: "postgres"
        - name: POSTGRES_USER
          value: "postgres"
        - name: PGDATA
          value: "/var/lib/postgresql/data/pgdata"
        ports:
        - containerPort: 5432
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
      volumes:
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: postgres-auth-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: postgres-auth
  namespace: default
spec:
  selector:
    app: postgres-auth
  ports:
  - port: 5432
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-order-pvc
  namespace: default
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres-order
  namespace: default
spec:
  selector:
    matchLabels:
      app: postgres-order
  template:
    metadata:
      labels:
        app: postgres-order
    spec:
      containers:
      - name: postgres
        image: postgres:15
        env:
        - name: POSTGRES_DB
          value: "order_db"
        - name: POSTGRES_PASSWORD
          value: "postgres"
        - name: POSTGRES_USER
          value: "postgres"
        - name: PGDATA
          value: "/var/lib/postgresql/data/pgdata"
        ports:
        - containerPort: 5432
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
      volumes:
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: postgres-order-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: postgres-order
  namespace: default
spec:
  selector:
    app: postgres-order
  ports:
  - port: 5432
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-product-pvc
  namespace: default
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres-product
  namespace: default
spec:
  selector:
    matchLabels:
      app: postgres-product
  template:
    metadata:
      labels:
        app: postgres-product
    spec:
      containers:
      - name: postgres
        image: postgres:15
        env:
        - name: POSTGRES_DB
          value: "product_db"
        - name: POSTGRES_PASSWORD
          value: "postgres"
        - name: POSTGRES_USER
          value: "postgres"
        - name: PGDATA
          value: "/var/lib/postgresql/data/pgdata"
        ports:
        - containerPort: 5432
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
      volumes:
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: postgres-product-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: postgres-product
  namespace: default
spec:
  selector:
    app: postgres-product
  ports:
  - port: 5432 
---
# Source: microservices/templates/order-service/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: order-service
  namespace: default
spec:
  type: ClusterIP
  selector:
    app: order-service
  ports:
  - port: 8003
    targetPort: 8003
    protocol: TCP
    name: http 
---
# Source: microservices/templates/order-service/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: order-service
  namespace: default
spec:
  replicas: 2
  selector:
    matchLabels:
      app: order-service
  template:
    metadata:
      labels:
        app: order-service
    spec:
      imagePullSecrets:
      - name: acr-secret
      containers:
      - name: order-service
        image: {{ .Values.containerRegistry }}/{{ .Values.imageRepository }}/order-service:{{ .Values.tag }}
        ports:
        - containerPort: 8003
        resources:
          limits:
            cpu: 200m
            memory: 256Mi
          requests:
            cpu: 100m
            memory: 128Mi
        env:
        - name: SQLALCHEMY_DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: order-secrets
              key: SQLALCHEMY_DATABASE_URL
        - name: PRODUCT_SERVICE_URL
          value: "http://product-service:8002"
        - name: REDIS_URL
          value: "redis://redis:6379/2"
        livenessProbe:
          httpGet:
            path: /health
            port: 8003
          initialDelaySeconds: 5
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: 8003
          initialDelaySeconds: 5
          periodSeconds: 10 
---
# Source: microservices/templates/auth-service/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: auth-service
  namespace: default
spec:
  type: ClusterIP
  selector:
    app: auth-service
  ports:
  - port: 8001
    targetPort: 8001
    protocol: TCP
    name: http 
---
# Source: microservices/templates/api-gateway/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: api-gateway
  namespace: default
spec:
  type: LoadBalancer
  selector:
    app: api-gateway
  ports:
  - port: 8000
    targetPort: 8000
    protocol: TCP
    name: http 
---
# Source: microservices/templates/product-service/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: product-service
  namespace: default
spec:
  type: ClusterIP
  selector:
    app: product-service
  ports:
  - port: 8002
    targetPort: 8002
    protocol: TCP
    name: http
