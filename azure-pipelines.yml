trigger:
  branches:
    include:
    - main
  paths:
    exclude:
    - README.md
    - terraform/**

variables:
  # Container registry service connection
  dockerRegistryServiceConnection: 'acr-service-connection'
  imageRepository: 'microservices-demo'
  containerRegistry: '$(ACR_LOGIN_SERVER)'
  tag: '$(Build.BuildId)'
  
  # Kubernetes service connection
  kubernetesServiceConnection: 'aks-service-connection'
  namespace: 'microservices-demo'

stages:
- stage: Build
  displayName: Build and Push
  jobs:
  - job: BuildAndPush
    displayName: Build and Push
    pool:
      name: 'Default'  # Using our self-hosted agent pool
    steps:
    # API Gateway
    - task: Docker@2
      displayName: Build and Push API Gateway
      inputs:
        containerRegistry: '$(dockerRegistryServiceConnection)'
        repository: '$(imageRepository)/api-gateway'
        command: 'buildAndPush'
        Dockerfile: 'api-gateway/Dockerfile'
        tags: |
          $(tag)
          latest
    
    # Auth Service
    - task: Docker@2
      displayName: Build and Push Auth Service
      inputs:
        containerRegistry: '$(dockerRegistryServiceConnection)'
        repository: '$(imageRepository)/auth-service'
        command: 'buildAndPush'
        Dockerfile: 'auth-service/Dockerfile'
        tags: |
          $(tag)
          latest
    
    # Product Service
    - task: Docker@2
      displayName: Build and Push Product Service
      inputs:
        containerRegistry: '$(dockerRegistryServiceConnection)'
        repository: '$(imageRepository)/product-service'
        command: 'buildAndPush'
        Dockerfile: 'product-service/Dockerfile'
        tags: |
          $(tag)
          latest
    
    # Order Service
    - task: Docker@2
      displayName: Build and Push Order Service
      inputs:
        containerRegistry: '$(dockerRegistryServiceConnection)'
        repository: '$(imageRepository)/order-service'
        command: 'buildAndPush'
        Dockerfile: 'order-service/Dockerfile'
        tags: |
          $(tag)
          latest

# =====================================================================
# DEPLOYMENT STAGE
# The following changes were made to fix deployment issues:
# 1. Changed container ports from 80 to correct application ports:
#    - API Gateway: 8000 (was 80)
#    - Auth Service: 8001 (was 80)
#    - Product Service: 8002 (was 80)
#    - Order Service: 8003 (was 80)
# 
# 2. Changed service ports to match application ports:
#    - API Gateway: 8000 (was 80)
#    - Auth Service: 8001 (was 80)
#    - Product Service: 8002 (was 80)
#    - Order Service: 8003 (was 80)
#
# 3. Added required environment variables for each service:
#    - Database connection strings
#    - Redis URLs
#    - Service URLs for inter-service communication
#
# 4. Added imagePullSecrets to all deployments
#
# 5. Removed health checks to prevent circular dependencies
# =====================================================================
- stage: Deploy
  displayName: Deploy to AKS
  dependsOn: Build
  jobs:
  - deployment: DeployToAKS
    displayName: Deploy to AKS
    pool:
      name: 'Default'  # Using our self-hosted agent pool
    environment: 'development'
    strategy:
      runOnce:
        deploy:
          steps:
          # Use a bash script to explicitly set KUBECONFIG and run kubectl
          - task: Bash@3
            displayName: Deploy to Kubernetes cluster
            inputs:
              targetType: 'inline'
              script: |
                # Ensure KUBECONFIG is set
                export KUBECONFIG=~/.kube/config
                
                # Check current context
                echo "Current Kubernetes context:"
                kubectl config current-context || echo "No current context"
                
                # Create namespace if it doesn't exist
                kubectl create namespace $(namespace) --dry-run=client -o yaml | kubectl apply -f -
                
                # Create a temporary file for the Kubernetes manifests
                TEMP_FILE=$(mktemp)
                
                # Write the manifests to the temporary file
                cat > $TEMP_FILE << 'EOF'
                apiVersion: apps/v1
                kind: Deployment
                metadata:
                  name: api-gateway
                  namespace: $(namespace)
                spec:
                  replicas: 2
                  selector:
                    matchLabels:
                      app: api-gateway
                  template:
                    metadata:
                      labels:
                        app: api-gateway
                    spec:
                      # Added imagePullSecrets
                      imagePullSecrets:
                      - name: acr-secret
                      containers:
                      - name: api-gateway
                        image: $(containerRegistry)/$(imageRepository)/api-gateway:$(tag)
                        ports:
                        # Changed port from 80 to 8000
                        - containerPort: 8000
                        # Added environment variables
                        env:
                        - name: AUTH_SERVICE_URL
                          value: "http://auth-service:8001"
                        - name: PRODUCT_SERVICE_URL
                          value: "http://product-service:8002"
                        - name: ORDER_SERVICE_URL
                          value: "http://order-service:8003"
                ---
                apiVersion: v1
                kind: Service
                metadata:
                  name: api-gateway
                  namespace: $(namespace)
                spec:
                  type: LoadBalancer
                  ports:
                  # Changed port from 80 to 8000
                  - port: 8000
                    targetPort: 8000
                  selector:
                    app: api-gateway
                ---
                apiVersion: apps/v1
                kind: Deployment
                metadata:
                  name: auth-service
                  namespace: $(namespace)
                spec:
                  replicas: 2
                  selector:
                    matchLabels:
                      app: auth-service
                  template:
                    metadata:
                      labels:
                        app: auth-service
                    spec:
                      # Added imagePullSecrets
                      imagePullSecrets:
                      - name: acr-secret
                      containers:
                      - name: auth-service
                        image: $(containerRegistry)/$(imageRepository)/auth-service:$(tag)
                        ports:
                        # Changed port from 80 to 8001
                        - containerPort: 8001
                        # Added environment variables
                        env:
                        - name: SQLALCHEMY_DATABASE_URL
                          valueFrom:
                            secretKeyRef:
                              name: auth-secrets
                              key: SQLALCHEMY_DATABASE_URL
                        - name: REDIS_URL
                          value: "redis://redis:6379/0"
                ---
                apiVersion: v1
                kind: Service
                metadata:
                  name: auth-service
                  namespace: $(namespace)
                spec:
                  ports:
                  # Changed port from 80 to 8001
                  - port: 8001
                    targetPort: 8001
                  selector:
                    app: auth-service
                ---
                apiVersion: apps/v1
                kind: Deployment
                metadata:
                  name: product-service
                  namespace: $(namespace)
                spec:
                  replicas: 2
                  selector:
                    matchLabels:
                      app: product-service
                  template:
                    metadata:
                      labels:
                        app: product-service
                    spec:
                      # Added imagePullSecrets
                      imagePullSecrets:
                      - name: acr-secret
                      containers:
                      - name: product-service
                        image: $(containerRegistry)/$(imageRepository)/product-service:$(tag)
                        ports:
                        # Changed port from 80 to 8002
                        - containerPort: 8002
                        # Added environment variables
                        env:
                        - name: SQLALCHEMY_DATABASE_URL
                          valueFrom:
                            secretKeyRef:
                              name: product-secrets
                              key: SQLALCHEMY_DATABASE_URL
                        - name: REDIS_URL
                          value: "redis://redis:6379/1"
                ---
                apiVersion: v1
                kind: Service
                metadata:
                  name: product-service
                  namespace: $(namespace)
                spec:
                  ports:
                  # Changed port from 80 to 8002
                  - port: 8002
                    targetPort: 8002
                  selector:
                    app: product-service
                ---
                apiVersion: apps/v1
                kind: Deployment
                metadata:
                  name: order-service
                  namespace: $(namespace)
                spec:
                  replicas: 2
                  selector:
                    matchLabels:
                      app: order-service
                  template:
                    metadata:
                      labels:
                        app: order-service
                    spec:
                      # Added imagePullSecrets
                      imagePullSecrets:
                      - name: acr-secret
                      containers:
                      - name: order-service
                        image: $(containerRegistry)/$(imageRepository)/order-service:$(tag)
                        ports:
                        # Changed port from 80 to 8003
                        - containerPort: 8003
                        # Added environment variables
                        env:
                        - name: SQLALCHEMY_DATABASE_URL
                          valueFrom:
                            secretKeyRef:
                              name: order-secrets
                              key: SQLALCHEMY_DATABASE_URL
                        - name: PRODUCT_SERVICE_URL
                          value: "http://product-service:8002"
                        - name: REDIS_URL
                          value: "redis://redis:6379/2"
                ---
                apiVersion: v1
                kind: Service
                metadata:
                  name: order-service
                  namespace: $(namespace)
                spec:
                  ports:
                  # Changed port from 80 to 8003
                  - port: 8003
                    targetPort: 8003
                  selector:
                    app: order-service
                EOF
                
                # Replace variables in the manifest file
                sed -i "s|\$(namespace)|${namespace}|g" $TEMP_FILE
                sed -i "s|\$(containerRegistry)|${containerRegistry}|g" $TEMP_FILE
                sed -i "s|\$(imageRepository)|${imageRepository}|g" $TEMP_FILE
                sed -i "s|\$(tag)|${tag}|g" $TEMP_FILE
                
                # Apply the manifests with validation disabled
                kubectl apply -f $TEMP_FILE --validate=false
                
                # Clean up
                rm $TEMP_FILE 