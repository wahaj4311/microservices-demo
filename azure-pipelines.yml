trigger:
  branches:
    include:
    - main
  paths:
    exclude:
    - README.md
    - terraform/**

variables:
  # Container registry service connection
  dockerRegistryServiceConnection: 'acr-service-connection'
  imageRepository: 'microservices-demo'
  containerRegistry: '$(ACR_LOGIN_SERVER)'
  tag: '$(Build.BuildId)'
  
  # Kubernetes service connection
  kubernetesServiceConnection: 'aks-service-connection'
  namespace: 'microservices-demo'

stages:
- stage: Build
  displayName: Build and Push
  jobs:
  - job: BuildAndPush
    displayName: Build and Push
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    # API Gateway
    - task: Docker@2
      displayName: Build and Push API Gateway
      inputs:
        containerRegistry: '$(dockerRegistryServiceConnection)'
        repository: '$(imageRepository)/api-gateway'
        command: 'buildAndPush'
        Dockerfile: 'api-gateway/Dockerfile'
        tags: |
          $(tag)
          latest
    
    # Auth Service
    - task: Docker@2
      displayName: Build and Push Auth Service
      inputs:
        containerRegistry: '$(dockerRegistryServiceConnection)'
        repository: '$(imageRepository)/auth-service'
        command: 'buildAndPush'
        Dockerfile: 'auth-service/Dockerfile'
        tags: |
          $(tag)
          latest
    
    # Product Service
    - task: Docker@2
      displayName: Build and Push Product Service
      inputs:
        containerRegistry: '$(dockerRegistryServiceConnection)'
        repository: '$(imageRepository)/product-service'
        command: 'buildAndPush'
        Dockerfile: 'product-service/Dockerfile'
        tags: |
          $(tag)
          latest
    
    # Order Service
    - task: Docker@2
      displayName: Build and Push Order Service
      inputs:
        containerRegistry: '$(dockerRegistryServiceConnection)'
        repository: '$(imageRepository)/order-service'
        command: 'buildAndPush'
        Dockerfile: 'order-service/Dockerfile'
        tags: |
          $(tag)
          latest

- stage: Deploy
  displayName: Deploy to AKS
  dependsOn: Build
  jobs:
  - deployment: DeployToAKS
    displayName: Deploy to AKS
    pool:
      vmImage: 'ubuntu-latest'
    environment: 'development'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: Kubernetes@1
            displayName: Deploy to Kubernetes cluster
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceEndpoint: '$(kubernetesServiceConnection)'
              namespace: '$(namespace)'
              command: 'apply'
              useConfigurationFile: true
              inline: |
                apiVersion: apps/v1
                kind: Deployment
                metadata:
                  name: api-gateway
                  namespace: $(namespace)
                spec:
                  replicas: 2
                  selector:
                    matchLabels:
                      app: api-gateway
                  template:
                    metadata:
                      labels:
                        app: api-gateway
                    spec:
                      containers:
                      - name: api-gateway
                        image: $(containerRegistry)/$(imageRepository)/api-gateway:$(tag)
                        ports:
                        - containerPort: 80
                ---
                apiVersion: v1
                kind: Service
                metadata:
                  name: api-gateway
                  namespace: $(namespace)
                spec:
                  type: LoadBalancer
                  ports:
                  - port: 80
                  selector:
                    app: api-gateway
                ---
                apiVersion: apps/v1
                kind: Deployment
                metadata:
                  name: auth-service
                  namespace: $(namespace)
                spec:
                  replicas: 2
                  selector:
                    matchLabels:
                      app: auth-service
                  template:
                    metadata:
                      labels:
                        app: auth-service
                    spec:
                      containers:
                      - name: auth-service
                        image: $(containerRegistry)/$(imageRepository)/auth-service:$(tag)
                        ports:
                        - containerPort: 80
                ---
                apiVersion: v1
                kind: Service
                metadata:
                  name: auth-service
                  namespace: $(namespace)
                spec:
                  ports:
                  - port: 80
                  selector:
                    app: auth-service
                ---
                apiVersion: apps/v1
                kind: Deployment
                metadata:
                  name: product-service
                  namespace: $(namespace)
                spec:
                  replicas: 2
                  selector:
                    matchLabels:
                      app: product-service
                  template:
                    metadata:
                      labels:
                        app: product-service
                    spec:
                      containers:
                      - name: product-service
                        image: $(containerRegistry)/$(imageRepository)/product-service:$(tag)
                        ports:
                        - containerPort: 80
                ---
                apiVersion: v1
                kind: Service
                metadata:
                  name: product-service
                  namespace: $(namespace)
                spec:
                  ports:
                  - port: 80
                  selector:
                    app: product-service
                ---
                apiVersion: apps/v1
                kind: Deployment
                metadata:
                  name: order-service
                  namespace: $(namespace)
                spec:
                  replicas: 2
                  selector:
                    matchLabels:
                      app: order-service
                  template:
                    metadata:
                      labels:
                        app: order-service
                    spec:
                      containers:
                      - name: order-service
                        image: $(containerRegistry)/$(imageRepository)/order-service:$(tag)
                        ports:
                        - containerPort: 80
                ---
                apiVersion: v1
                kind: Service
                metadata:
                  name: order-service
                  namespace: $(namespace)
                spec:
                  ports:
                  - port: 80
                  selector:
                    app: order-service 