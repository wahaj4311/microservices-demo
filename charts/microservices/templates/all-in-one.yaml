# API Gateway
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-gateway
  namespace: {{ .Release.Namespace }}
spec:
  replicas: {{ .Values.apiGateway.replicas }}
  selector:
    matchLabels:
      app: api-gateway
  template:
    metadata:
      labels:
        app: api-gateway
    spec:
      imagePullSecrets:
      - name: acr-secret
      containers:
      - name: api-gateway
        image: "{{ .Values.containerRegistry }}/{{ .Values.imageRepository }}/api-gateway:{{ .Values.tag }}"
        ports:
        - containerPort: 8000
        {{- with .Values.apiGateway }}
        resources:
{{ toYaml .resources | indent 10 }}
        env:
        {{- range $key, $value := .env }}
        - name: {{ $key }}
          value: {{ $value | quote }}
        {{- end }}
        {{- end }}
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 10
          periodSeconds: 30
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 8000
          initialDelaySeconds: 15
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
---
apiVersion: v1
kind: Service
metadata:
  name: api-gateway
  namespace: {{ .Release.Namespace }}
spec:
  type: LoadBalancer
  ports:
  - port: 8000
    targetPort: 8000
  selector:
    app: api-gateway
---
# Auth Service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: auth-service
  namespace: {{ .Release.Namespace }}
spec:
  replicas: {{ .Values.authService.replicas }}
  selector:
    matchLabels:
      app: auth-service
  template:
    metadata:
      labels:
        app: auth-service
    spec:
      imagePullSecrets:
      - name: acr-secret
      containers:
      - name: auth-service
        image: "{{ .Values.containerRegistry }}/{{ .Values.imageRepository }}/auth-service:{{ .Values.tag }}"
        ports:
        - containerPort: 8001
        {{- with .Values.authService }}
        resources:
{{ toYaml .resources | indent 10 }}
        {{- end }}
        env:
        - name: SQLALCHEMY_DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: auth-secrets
              key: SQLALCHEMY_DATABASE_URL
        - name: REDIS_URL
          value: {{ .Values.authService.env.REDIS_URL | quote }}
        livenessProbe:
          httpGet:
            path: /health
            port: 8001
          initialDelaySeconds: 10
          periodSeconds: 30
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 8001
          initialDelaySeconds: 15
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
---
apiVersion: v1
kind: Service
metadata:
  name: auth-service
  namespace: {{ .Release.Namespace }}
spec:
  type: ClusterIP
  ports:
  - port: 8001
    targetPort: 8001
  selector:
    app: auth-service
---
# Product Service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: product-service
  namespace: {{ .Release.Namespace }}
spec:
  replicas: {{ .Values.productService.replicas }}
  selector:
    matchLabels:
      app: product-service
  template:
    metadata:
      labels:
        app: product-service
    spec:
      imagePullSecrets:
      - name: acr-secret
      containers:
      - name: product-service
        image: "{{ .Values.containerRegistry }}/{{ .Values.imageRepository }}/product-service:{{ .Values.tag }}"
        ports:
        - containerPort: 8002
        {{- with .Values.productService }}
        resources:
{{ toYaml .resources | indent 10 }}
        {{- end }}
        env:
        - name: SQLALCHEMY_DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: product-secrets
              key: SQLALCHEMY_DATABASE_URL
        - name: REDIS_URL
          value: {{ .Values.productService.env.REDIS_URL | quote }}
        livenessProbe:
          httpGet:
            path: /health
            port: 8002
          initialDelaySeconds: 10
          periodSeconds: 30
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 8002
          initialDelaySeconds: 15
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
---
apiVersion: v1
kind: Service
metadata:
  name: product-service
  namespace: {{ .Release.Namespace }}
spec:
  type: ClusterIP
  ports:
  - port: 8002
    targetPort: 8002
  selector:
    app: product-service
---
# Order Service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: order-service
  namespace: {{ .Release.Namespace }}
spec:
  replicas: {{ .Values.orderService.replicas }}
  selector:
    matchLabels:
      app: order-service
  template:
    metadata:
      labels:
        app: order-service
    spec:
      imagePullSecrets:
      - name: acr-secret
      containers:
      - name: order-service
        image: "{{ .Values.containerRegistry }}/{{ .Values.imageRepository }}/order-service:{{ .Values.tag }}"
        ports:
        - containerPort: 8003
        {{- with .Values.orderService }}
        resources:
{{ toYaml .resources | indent 10 }}
        {{- end }}
        env:
        - name: SQLALCHEMY_DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: order-secrets
              key: SQLALCHEMY_DATABASE_URL
        - name: REDIS_URL
          value: {{ .Values.orderService.env.REDIS_URL | quote }}
        - name: PRODUCT_SERVICE_URL
          value: {{ .Values.orderService.env.PRODUCT_SERVICE_URL | quote }}
        livenessProbe:
          httpGet:
            path: /health
            port: 8003
          initialDelaySeconds: 10
          periodSeconds: 30
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 8003
          initialDelaySeconds: 15
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
---
apiVersion: v1
kind: Service
metadata:
  name: order-service
  namespace: {{ .Release.Namespace }}
spec:
  type: ClusterIP
  ports:
  - port: 8003
    targetPort: 8003
  selector:
    app: order-service
---
# Redis Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: {{ .Release.Namespace }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: {{ .Values.redis.image }}
        ports:
        - containerPort: 6379
        resources:
{{ toYaml .Values.redis.resources | indent 10 }}
---
apiVersion: v1
kind: Service
metadata:
  name: redis
  namespace: {{ .Release.Namespace }}
spec:
  type: ClusterIP
  ports:
  - port: 6379
    targetPort: 6379
  selector:
    app: redis
---
# Postgres Auth
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres-auth
  namespace: {{ .Release.Namespace }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres-auth
  template:
    metadata:
      labels:
        app: postgres-auth
    spec:
      containers:
      - name: postgres
        image: {{ .Values.postgres.auth.image }}
        ports:
        - containerPort: 5432
        env:
        {{- range $key, $value := .Values.postgres.auth.env }}
        - name: {{ $key }}
          value: {{ $value | quote }}
        {{- end }}
        resources:
{{ toYaml .Values.postgres.auth.resources | indent 10 }}
        volumeMounts:
        - name: postgres-auth-data
          mountPath: /var/lib/postgresql/data
      volumes:
      - name: postgres-auth-data
        persistentVolumeClaim:
          claimName: postgres-auth-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: postgres-auth
  namespace: {{ .Release.Namespace }}
spec:
  type: ClusterIP
  ports:
  - port: 5432
    targetPort: 5432
  selector:
    app: postgres-auth
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-auth-pvc
  namespace: {{ .Release.Namespace }}
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: {{ .Values.postgres.auth.persistence.size }}
---
# Postgres Product
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres-product
  namespace: {{ .Release.Namespace }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres-product
  template:
    metadata:
      labels:
        app: postgres-product
    spec:
      containers:
      - name: postgres
        image: {{ .Values.postgres.product.image }}
        ports:
        - containerPort: 5432
        env:
        {{- range $key, $value := .Values.postgres.product.env }}
        - name: {{ $key }}
          value: {{ $value | quote }}
        {{- end }}
        resources:
{{ toYaml .Values.postgres.product.resources | indent 10 }}
        volumeMounts:
        - name: postgres-product-data
          mountPath: /var/lib/postgresql/data
      volumes:
      - name: postgres-product-data
        persistentVolumeClaim:
          claimName: postgres-product-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: postgres-product
  namespace: {{ .Release.Namespace }}
spec:
  type: ClusterIP
  ports:
  - port: 5432
    targetPort: 5432
  selector:
    app: postgres-product
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-product-pvc
  namespace: {{ .Release.Namespace }}
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: {{ .Values.postgres.product.persistence.size }}
---
# Postgres Order
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres-order
  namespace: {{ .Release.Namespace }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres-order
  template:
    metadata:
      labels:
        app: postgres-order
    spec:
      containers:
      - name: postgres
        image: {{ .Values.postgres.order.image }}
        ports:
        - containerPort: 5432
        env:
        {{- range $key, $value := .Values.postgres.order.env }}
        - name: {{ $key }}
          value: {{ $value | quote }}
        {{- end }}
        resources:
{{ toYaml .Values.postgres.order.resources | indent 10 }}
        volumeMounts:
        - name: postgres-order-data
          mountPath: /var/lib/postgresql/data
      volumes:
      - name: postgres-order-data
        persistentVolumeClaim:
          claimName: postgres-order-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: postgres-order
  namespace: {{ .Release.Namespace }}
spec:
  type: ClusterIP
  ports:
  - port: 5432
    targetPort: 5432
  selector:
    app: postgres-order
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-order-pvc
  namespace: {{ .Release.Namespace }}
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: {{ .Values.postgres.order.persistence.size }} 